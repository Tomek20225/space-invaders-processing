class EnemyPlane {
  int rows = 5;
  int cols = 11;
  int invaderCount = this.rows * this.cols;
  int invaderSize = 32;
  
  float planeSpeed = 6;
  float invaderSpeed = this.planeSpeed / this.invaderCount;
  Invader[][] invaders = new Invader[this.rows][this.cols];
  
  float xBegin = (width - (this.cols * this.invaderSize)) / 2;
  float xEnd = this.xBegin + (this.invaderSize * this.cols);
  float yBegin = this.invaderSize * 4;
  float yEnd = this.yBegin + (this.rows * invaderSize);
  
  String startDirection = "RIGHT";
  String currentDirection;
  
  UFO ufo = null;
  float ufoProbability = 0.1;
  float ufoSpeed = 1.5;
  
  
  EnemyPlane(int level) {
    this.yBegin += this.invaderSize * level;
    this.yEnd = this.yBegin + (this.rows * invaderSize);
    this.currentDirection = this.startDirection;
    planeSpeed += level;
    
    for (int y = 0; y < this.rows; y++) {
      for (int x = 0; x < this.cols; x++) {
        float invaderX = this.xBegin + (x * this.invaderSize);
        float invaderY = this.yBegin + (y * this.invaderSize);
        
        if (y == 0) {
          this.invaders[y][x] = new Squid(invaderX, invaderY);
        }
        else if (y == 1 || y == 2) {
          this.invaders[y][x] = new Crab(invaderX, invaderY);
        }
        else {
          this.invaders[y][x] = new Octopus(invaderX, invaderY);
        }
      }
    }
  }
  
  void show() {
    for (int y = 0; y < this.rows; y++) {
      for (int x = 0; x < this.cols; x++) {
        this.invaders[y][x].show();
      }
    }
    
    if (this.ufo != null) {
      this.ufo.show();
    }
  }
  
  void move() {
    for (int y = 0; y < this.rows; y++) {
      for (int x = 0; x < this.cols; x++) {
        this.invaders[y][x].move(this.currentDirection, this.invaderSpeed);
      }
    }
    
    if (this.currentDirection == "RIGHT") {
      this.xBegin += this.invaderSpeed;
    }
    else if (this.currentDirection == "LEFT") {
      this.xBegin -= this.invaderSpeed;
    }
    
    this.xEnd = this.xBegin + (this.invaderSize * this.cols);
    
    boolean bounced = false;
    
    if (this.xEnd >= width) {
      this.currentDirection = "LEFT";
      bounced = true;
    }
    else if (this.xBegin <= 0) {
      this.currentDirection = "RIGHT"; 
      bounced = true;
    }
    
    if (bounced) {
      this.yBegin += this.invaderSize;
      this.yEnd = this.yBegin + (this.rows * invaderSize);
      
      for (int y = 0; y < this.rows; y++) {
        for (int x = 0; x < this.cols; x++) {
          this.invaders[y][x].moveDown(this.invaderSize);
        }
      }
    }
    
    if (this.ufo == null) {
      if (random(0, 1) <= this.ufoProbability) {
        this.ufo = new UFO();
        println("A wild UFO appeared!");
      }
    }
    else {
      if (this.ufo.isOutOfBounds(width)) {
        this.ufo = null; 
      }
      else {
        this.ufo.move("RIGHT", this.ufoSpeed); 
      }
    }
  }
}
